/*
*liuqiong@wind-mobi.com 2016-12-17 begin
*/
package com.android.server.countrycode;

import android.content.Context;
import android.util.Slog;
import com.android.server.SystemService;
import android.options.wind.CountryCodeUtils;
import android.os.Binder;
import android.os.ServiceManager;
import com.mediatek.hdmi.NvRAMAgent;
import android.content.Intent;
import android.os.IBinder;
//chusuxia@wind-mobi.com 20161223 start
//add for CC_CBON
import android.os.SystemProperties;
import java.io.File;
import android.util.Log;
//chusuxia@wind-mobi.com 20161223 end

/**
 * CameraService is the system_server analog to the camera service running in mediaserver.
 *
 * @hide
 */
public class CountryCodeService extends SystemService {
    private Context mContext;
    //chusuxia@wind-mobi.com 20161220 start
    private String WIND_FACTORYRESET_PERSIST = "persist.sys.wind.factoryreset";
    private String WIND_UPGRADE_PERSIST = "persist.sys.wind.upgrade";
    private String isReset = SystemProperties.get(WIND_FACTORYRESET_PERSIST);
    private String isUpgrade = SystemProperties.get(WIND_UPGRADE_PERSIST);
    private String WIND_IS_SET_UMTSCB_OFF = "persist.sys.wind.umtscboff";

    //chusuxia@wind-mobi.com 20161220 end

    private String WIND_FIRST_BOOT = "persist.sys.wind.first_boot";
    private String WIND_REBOOT = "persist.sys.wind.reboot";
    
    public CountryCodeService(Context context) {
        super(context);

        mContext = context;
    }

    @Override
    public void onStart() {
        CountryCodeUtils.setCountryCodeFlag(mContext);
        CountryCodeUtils.mccBroadcast(mContext);
        //chusuxia@wind-mobi.com 20161223 start
        //add for CC_CBON
        Log.i("Sakura", "CC: start Set cbon");
        if(isReset.equals("")) {
            SetFactoryPersist();
        } else if(isUpgrade.equals("")) {
            SetUpgardePersist();
        }
        SetUmtsCbonFlag();
        //chusuxia@wind-mobi.com 20161223 end

        String removeSupport = CountryCodeUtils.getStringValue(CountryCodeUtils.COUNTRYCODE_SUPPORT_DOWNLOAD_REMOVE_NV);
        if (removeSupport != null && removeSupport.equals("yes")) {
            if ("first".equals(SystemProperties.get(WIND_FIRST_BOOT))) {
                Log.d("JerryLiu", "First!");
            } else { //format all   download only  factory
                SystemProperties.set(WIND_FIRST_BOOT, "first");
                Log.d("JerryLiu", "no First!");
                if ("reset".equals(SystemProperties.get(WIND_FACTORYRESET_PERSIST))) {
                    Log.d("JerryLiu", "Reset!");
                //liuxiaoshuan@wind.mobi.com 20170421 add
                }else if(isEncryptoRunning() || !"unencrypted".equals(SystemProperties.get("ro.crypto.state"))){//encrypting
                    Log.d("lxs", "encrypting!");
                }else { //format all download only
                    Log.d("JerryLiu", "no Reset!");
                    if (null == CountryCodeUtils.getCountryCode()) { // format all
                        Log.d("JerryLiu", "NULL!");
                    } else { //download only
                        Log.d("JerryLiu", "not NULL!");
                        resetNvRam();

                        SystemProperties.set(WIND_REBOOT, "reboot");
                                            
                        return;
                   }
                }
            }
        }

        publishBinderService("countrycodeservice", new Binder(){});
    }
    //liuxiaoshuan@wind.mobi.com 20170421 start
    private boolean isEncryptoRunning(){
        boolean running = false;
        File file=new File("/protect_f/encrypto_running_flag");
        if(file.exists()){
            running = true;
            Log.d("lxs", "isEncryptoRunning = "+running);
            //file.delete();
        }
        return running;
    }
    //liuxiaoshuan@wind.mobi.com 20170421 end
    private void resetNvRam() {
        byte[] key = null;
        IBinder binder = ServiceManager.getService("NvRAMAgent");
        NvRAMAgent agent = NvRAMAgent.Stub.asInterface(binder);

        try {
            byte[] buff = agent.readFile(59);
            getBuff(104 + 377, 15 + 15 + 8, "noset000000000000000000000000000000000000", buff);
            agent.writeFile(59, buff);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void getBuff(int addr, int len, String value, byte[] buffer) {        
            byte[] vals = value.getBytes();

            int i = 0;
            for (; i < len && i < vals.length; i++) {
                buffer[addr + i] = vals[i];
            }
            buffer[addr+i] = '\0';
        }


    //chusuxia@wind-mobi.com 20161223 start
    //add for CC_CBON
    private void SetFactoryPersist(){

        String fileName = "/cache/recovery/last_factory";
        File file = new File(fileName);
        if(file.exists()) {
            SystemProperties.set(WIND_FACTORYRESET_PERSIST, "reset");
            Log.i("Sakura", "CC: Just FactoryReset now!");
            file.delete();
        }
    }

    private void SetUpgardePersist() {
        String fileName = "/cache/recovery/last_upgrade";
        File file = new File(fileName);
        if(file.exists()) {
            SystemProperties.set(WIND_UPGRADE_PERSIST, "upgrade");
            Log.i("Sakura", "CC: Just FactoryReset now!");
            file.delete();
        }
    }

    private void  SetUmtsCbonFlag() {
        String toggle = CountryCodeUtils.getStringValue(CountryCodeUtils.COUNTRYCODE_ITEM_UMTSCB_OFF);
        Log.i("Sakura", "CC: umts cb off toggle is" + toggle);
        if("yes".equals(toggle)) {
            String isUmtsCboff = SystemProperties.get(WIND_IS_SET_UMTSCB_OFF);
            if(!"1".equals(isUmtsCboff)) {
                SystemProperties.set(WIND_IS_SET_UMTSCB_OFF, "1");
            }

        }

    }
    //chusuxia@wind-mobi.com 20161223 end
}

/*
*liuqiong@wind-mobi.com 2016-12-17 end
*/


