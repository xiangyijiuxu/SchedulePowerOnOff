/*
 * Copyright (C) 2011 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.systemui.statusbar;

import android.annotation.DrawableRes;
import android.content.Context;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.Rect;
import android.graphics.drawable.Animatable;
import android.graphics.drawable.AnimatedVectorDrawable;
import android.graphics.drawable.Drawable;
import android.os.SystemProperties;
import android.telephony.SubscriptionInfo;
import android.telephony.SubscriptionManager;
import android.telephony.TelephonyManager;
import android.util.ArraySet;
import android.util.AttributeSet;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.accessibility.AccessibilityEvent;
import android.widget.ImageView;
import android.widget.LinearLayout;

import com.android.systemui.R;
import com.android.systemui.statusbar.phone.StatusBarIconController;
import com.android.systemui.statusbar.policy.NetworkController.IconState;
import com.android.systemui.statusbar.policy.NetworkControllerImpl;
import com.android.systemui.statusbar.policy.SecurityController;
import com.android.systemui.tuner.TunerService;
import com.android.systemui.tuner.TunerService.Tunable;

import com.mediatek.systemui.ext.ISystemUIStatusBarExt;
import com.mediatek.systemui.PluginManager;
import com.mediatek.systemui.statusbar.util.FeatureOptions;

import java.util.ArrayList;
import java.util.List;
//caopei@wind-mobi.com 2017.04.27 start
import android.options.wind.WindFeatureOptions;
import com.android.internal.telephony.TelephonyProperties;
import android.net.ConnectivityManager;
//caopei@wind-mobi.com 2017.04.27 end
//hengyongyan@wind-mobi.com 2017.2.9 start
import android.graphics.ColorMatrix;
import android.graphics.ColorMatrixColorFilter;
//hengyongyan@wind-mobi.com 2017.2.9 end
// Intimately tied to the design of res/layout/signal_cluster_view.xml
//lijingwei@wind-mobi.com 2017/3/29 start
//fix PANELL-2149 The VoLTE icon is wrong
import android.options.wind.CountryCodeUtils;
//lijingwei@wind-mobi.com 2017/3/29 end
public class SignalClusterView
        extends LinearLayout
        implements NetworkControllerImpl.SignalCallback,
        SecurityController.SecurityControllerCallback, Tunable {

    static final String TAG = "SignalClusterView";
    static final boolean DEBUG = Log.isLoggable(TAG, Log.DEBUG);

    private static final String SLOT_AIRPLANE = "airplane";
    private static final String SLOT_MOBILE = "mobile";
    private static final String SLOT_WIFI = "wifi";
    private static final String SLOT_ETHERNET = "ethernet";

    NetworkControllerImpl mNC;
    SecurityController mSC;

    private boolean mNoSimsVisible = false;
    private boolean mVpnVisible = false;
    private boolean mEthernetVisible = false;
    private int mEthernetIconId = 0;
    private int mLastEthernetIconId = -1;
    private boolean mWifiVisible = false;
    private int mWifiStrengthId = 0;
    private int mLastWifiStrengthId = -1;
    private boolean mIsAirplaneMode = false;
    private int mAirplaneIconId = 0;
    //caopei@wind-mobi.com 2017.04.27 start
    //fix panell 2584 volte icon should be located at the left of WIFI
    private int mVolteIcon = 0;
    private boolean mIsVolteVisible = false;
    private TelephonyManager mTelephonyManager;
    //caopei@wind-mobi.com 2017.04.27 end
    private int mLastAirplaneIconId = -1;
    private String mAirplaneContentDescription;
    private String mWifiDescription;
    private String mEthernetDescription;
    private ArrayList<PhoneState> mPhoneStates = new ArrayList<PhoneState>();
    private int mIconTint = Color.WHITE;
    private float mDarkIntensity;
    private final Rect mTintArea = new Rect();

    ViewGroup mEthernetGroup, mWifiGroup;
    View mNoSimsCombo;
    ImageView mVpn, mEthernet, mWifi, mAirplane, mNoSims, mEthernetDark, mWifiDark, mNoSimsDark,mVolteType;//cao
    View mWifiAirplaneSpacer;
    View mWifiSignalSpacer;
    //caopei@wind-mobi.com 2017.04.20 start
    //fix panell 2584 volte icon should be located at the left of WIFI
    View mVolteSpacer;
    //caopei@wind-mobi.com 2017.04.20 end
    LinearLayout mMobileSignalGroup;

    private final int mMobileSignalGroupEndPadding;
    private final int mMobileDataIconStartPadding;
    private final int mWideTypeIconStartPadding;
    private final int mSecondaryTelephonyPadding;
    private final int mEndPadding;
    private final int mEndPaddingNothingVisible;
    private final float mIconScaleFactor;

    private boolean mBlockAirplane;
    private boolean mBlockMobile;
    private boolean mBlockWifi;
    private boolean mBlockEthernet;



    /// M: Add for Plugin feature @ {
    private ISystemUIStatusBarExt mStatusBarExt;
    /// @ }

    /// M: for vowifi
    boolean mIsWfcEnable;

    public SignalClusterView(Context context) {
        this(context, null);
    }

    public SignalClusterView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }

    public SignalClusterView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        //caopei@wind-mobi.com 2017.04.27 start
        mTelephonyManager = (TelephonyManager) mContext.getSystemService(context.TELEPHONY_SERVICE);
        //caopei@wind-mobi.com 2017.04.27 end
        Resources res = getResources();
        mMobileSignalGroupEndPadding =
                res.getDimensionPixelSize(R.dimen.mobile_signal_group_end_padding);
        mMobileDataIconStartPadding =
                res.getDimensionPixelSize(R.dimen.mobile_data_icon_start_padding);
        mWideTypeIconStartPadding = res.getDimensionPixelSize(R.dimen.wide_type_icon_start_padding);
        mSecondaryTelephonyPadding = res.getDimensionPixelSize(R.dimen.secondary_telephony_padding);
        mEndPadding = res.getDimensionPixelSize(R.dimen.signal_cluster_battery_padding);
        mEndPaddingNothingVisible = res.getDimensionPixelSize(
                R.dimen.no_signal_cluster_battery_padding);

        TypedValue typedValue = new TypedValue();
        res.getValue(R.dimen.status_bar_icon_scale_factor, typedValue, true);
        mIconScaleFactor = typedValue.getFloat();

        /// M: Add for Plugin feature @ {
        mStatusBarExt = PluginManager.getSystemUIStatusBarExt(context);
        /// @ }
        mIsWfcEnable = SystemProperties.get("persist.mtk_wfc_support").equals("1");
    }

    @Override
    public void onTuningChanged(String key, String newValue) {
        if (!StatusBarIconController.ICON_BLACKLIST.equals(key)) {
            return;
        }
        ArraySet<String> blockList = StatusBarIconController.getIconBlacklist(newValue);
        boolean blockAirplane = blockList.contains(SLOT_AIRPLANE);
        boolean blockMobile = blockList.contains(SLOT_MOBILE);
        boolean blockWifi = blockList.contains(SLOT_WIFI);
        boolean blockEthernet = blockList.contains(SLOT_ETHERNET);

        if (blockAirplane != mBlockAirplane || blockMobile != mBlockMobile
                || blockEthernet != mBlockEthernet || blockWifi != mBlockWifi) {
            mBlockAirplane = blockAirplane;
            mBlockMobile = blockMobile;
            mBlockEthernet = blockEthernet;
            mBlockWifi = blockWifi;
            // Re-register to get new callbacks.
            mNC.removeSignalCallback(this);
            mNC.addSignalCallback(this);
        }
    }

    public void setNetworkController(NetworkControllerImpl nc) {
        if (DEBUG) Log.d(TAG, "NetworkController=" + nc);
        mNC = nc;
    }

    public void setSecurityController(SecurityController sc) {
        if (DEBUG) Log.d(TAG, "SecurityController=" + sc);
        mSC = sc;
        mSC.addCallback(this);
        mVpnVisible = mSC.isVpnEnabled();
    }

    @Override
    protected void onFinishInflate() {
        super.onFinishInflate();

        mVpn            = (ImageView) findViewById(R.id.vpn);
        mEthernetGroup  = (ViewGroup) findViewById(R.id.ethernet_combo);
        mEthernet       = (ImageView) findViewById(R.id.ethernet);
        mEthernetDark   = (ImageView) findViewById(R.id.ethernet_dark);
        mWifiGroup      = (ViewGroup) findViewById(R.id.wifi_combo);
        mWifi           = (ImageView) findViewById(R.id.wifi_signal);
        mWifiDark       = (ImageView) findViewById(R.id.wifi_signal_dark);
        mAirplane       = (ImageView) findViewById(R.id.airplane);
        mNoSims         = (ImageView) findViewById(R.id.no_sims);
        mNoSimsDark     = (ImageView) findViewById(R.id.no_sims_dark);
        mNoSimsCombo    =             findViewById(R.id.no_sims_combo);
        mWifiAirplaneSpacer =         findViewById(R.id.wifi_airplane_spacer);
        mWifiSignalSpacer =           findViewById(R.id.wifi_signal_spacer);
        mMobileSignalGroup = (LinearLayout) findViewById(R.id.mobile_signal_group);
        //caopei@wind-mobi.com 2017.04.20 start
        //fix panell 2584 volte icon should be located at the left of WIFI
        mVolteType      = (ImageView)findViewById(R.id.volte_indicator_ext);
        mVolteSpacer =           findViewById(R.id.volte_indicator_spacer);
        //caopei@wind-mobi.com 2017.04.20 end
        maybeScaleVpnAndNoSimsIcons();
    }

    /**
     * Extracts the icon off of the VPN and no sims views and maybe scale them by
     * {@link #mIconScaleFactor}. Note that the other icons are not scaled here because they are
     * dynamic. As such, they need to be scaled each time the icon changes in {@link #apply()}.
     */
    private void maybeScaleVpnAndNoSimsIcons() {
        if (mIconScaleFactor == 1.f) {
            return;
        }

        mVpn.setImageDrawable(new ScalingDrawableWrapper(mVpn.getDrawable(), mIconScaleFactor));

        mNoSims.setImageDrawable(
                new ScalingDrawableWrapper(mNoSims.getDrawable(), mIconScaleFactor));
        mNoSimsDark.setImageDrawable(
                new ScalingDrawableWrapper(mNoSimsDark.getDrawable(), mIconScaleFactor));
    }

    @Override
    protected void onAttachedToWindow() {
        super.onAttachedToWindow();

        for (PhoneState state : mPhoneStates) {
            mMobileSignalGroup.addView(state.mMobileGroup);
        }

        int endPadding = mMobileSignalGroup.getChildCount() > 0 ? mMobileSignalGroupEndPadding : 0;
        mMobileSignalGroup.setPaddingRelative(0, 0, endPadding, 0);

        TunerService.get(mContext).addTunable(this, StatusBarIconController.ICON_BLACKLIST);

        /// M: Add for Plugin feature @ {
        mStatusBarExt.setCustomizedNoSimView(mNoSims);
        mStatusBarExt.setCustomizedNoSimView(mNoSimsDark);
        mStatusBarExt.addSignalClusterCustomizedView(mContext, this,
                indexOfChild(findViewById(R.id.mobile_signal_group)));
        /// @ }

        apply();
        applyIconTint();
        mNC.addSignalCallback(this);
    }

    @Override
    protected void onDetachedFromWindow() {
        mMobileSignalGroup.removeAllViews();
        TunerService.get(mContext).removeTunable(this);
        mSC.removeCallback(this);
        mNC.removeSignalCallback(this);

        super.onDetachedFromWindow();
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        super.onLayout(changed, l, t, r, b);

        // Re-run all checks against the tint area for all icons
        applyIconTint();
    }

    // From SecurityController.
    @Override
    public void onStateChanged() {
        post(new Runnable() {
            @Override
            public void run() {
                mVpnVisible = mSC.isVpnEnabled();
                apply();
            }
        });
    }

    @Override
    public void setWifiIndicators(boolean enabled, IconState statusIcon, IconState qsIcon,
            boolean activityIn, boolean activityOut, String description) {
        mWifiVisible = statusIcon.visible && !mBlockWifi;
        mWifiStrengthId = statusIcon.icon;
        mWifiDescription = statusIcon.contentDescription;

        apply();
    }
    ///M: Support[Network Type and volte on StatusBar]. Add more parameter networkType and volte .
    @Override
    public void setMobileDataIndicators(IconState statusIcon, IconState qsIcon, int statusType,
            int networkType, int volteIcon, int qsType, boolean activityIn, boolean activityOut,
            String typeContentDescription, String description, boolean isWide, int subId) {
        PhoneState state = getState(subId);
        if (state == null) {
            return;
        }
        state.mMobileVisible = statusIcon.visible && !mBlockMobile;
        state.mMobileStrengthId = statusIcon.icon;
        //caopei@wind-mobi.com 2017.03.13 start
        //fix Feature 133633 NetworkTypeIcons
        if(WindFeatureOptions.WIND_DEF_PRO_A158){
            Log.d(TAG,"statusType="+statusType+" networkType="+networkType+" typeContentDescription="+typeContentDescription+" description="+description+" subId="+subId);
            Log.d(TAG,"setMobileDataIndicators():isMobileDataConnected()="+mNC.isMobileDataConnected(subId)+" isMobileRoaming="+mNC.isMobileRoaming(subId));
            if(statusType!=0&&(typeContentDescription.equals("Roaming")||mNC.isMobileRoaming(subId))){
                //caopei@wind-mobi.com 2017.05.20 start
                //fix panell 3108 for tesco
                if(WindFeatureOptions.WIND_COUNTRY_CODE_SUPPORT && "yes".equals(CountryCodeUtils.getStringValue(CountryCodeUtils.COUNTRYCODE_ITEM_CUSTOM_ROAMING))){
                    state.mRoamIcon=R.drawable.stat_sys_data_fully_connected_roam;
                }else{
                    state.mRoamIcon=statusType;
                }
                //caopei@wind-mobi.com 2017.05.20 end
            }else{
                state.mRoamIcon=0;
            }
            /*if(mNC!=null && mNC.isMobileDataConnected(subId) && typeContentDescription.length() != 0) {
                state.mMobileTypeId = mNC.getDataDirectionId(typeContentDescription,subId);
            } else {
                state.mMobileTypeId = statusType;
            }*/
            state.mMobileTypeId = statusType;
        }else{
        state.mMobileTypeId = statusType;
        }
        //state.mMobileTypeId = statusType;
        //caopei@wind-mobi.com 2017.03.13 end
        state.mMobileDescription = statusIcon.contentDescription;
        state.mMobileTypeDescription = typeContentDescription;
        state.mIsMobileTypeIconWide = statusType != 0 && isWide;
        state.mNetworkIcon = networkType;
        //caopei@wind-mobi.com 2017.04.20 start
        //fix panell 2584 volte icon should be located at the left of WIFI
        //yexumin@wind-mobi.com 20170915 start
        //fix bug 177676
        state.mVolteIcon = volteIcon;
        if (volteIcon == 0) {
            mVolteIcon = 0;
            for (PhoneState phoneState : mPhoneStates) {
                if (phoneState != null && phoneState.mVolteIcon != 0) {
                    mVolteIcon = phoneState.mVolteIcon;
                    Log.i(TAG, "yexm state.mSubId = " + phoneState.mSubId + " , state.mVolteIcon = " + phoneState.mVolteIcon);
                }
            }
        } else {
            Log.i(TAG, "yexm volteIcon != 0");
            mVolteIcon = volteIcon;
        }
        Log.i(TAG, "yexm mVolteIcon = " + mVolteIcon);
        //yexumin@wind-mobi.com 20170915 end
        //caopei@wind-mobi.com 2017.04.20 end
        /// M: Add for plugin features. @ {
        state.mDataActivityIn = activityIn;
        state.mDataActivityOut = activityOut;
        /// @ }

        apply();
    }

    @Override
    public void setEthernetIndicators(IconState state) {
        mEthernetVisible = state.visible && !mBlockEthernet;
        mEthernetIconId = state.icon;
        mEthernetDescription = state.contentDescription;

        apply();
    }

    @Override
    public void setNoSims(boolean show) {
        mNoSimsVisible = show && !mBlockMobile;
        // M: Bug fix ALPS02302143, in case UI need to be refreshed.
        // MR1 also add this patch
        apply();
    }

    @Override
    public void setSubs(List<SubscriptionInfo> subs) {
        if (hasCorrectSubs(subs)) {
            return;
        }
        // Clear out all old subIds.
        for (PhoneState state : mPhoneStates) {
            if (state.mMobile != null) {
                state.maybeStopAnimatableDrawable(state.mMobile);
            }
            if (state.mMobileDark != null) {
                state.maybeStopAnimatableDrawable(state.mMobileDark);
            }
        }
        mPhoneStates.clear();
        if (mMobileSignalGroup != null) {
            mMobileSignalGroup.removeAllViews();
        }
        final int n = subs.size();
        for (int i = 0; i < n; i++) {
            inflatePhoneState(subs.get(i).getSubscriptionId());
        }
        if (isAttachedToWindow()) {
            applyIconTint();
        }
    }

    private boolean hasCorrectSubs(List<SubscriptionInfo> subs) {
        final int N = subs.size();
        if (N != mPhoneStates.size()) {
            return false;
        }
        for (int i = 0; i < N; i++) {
            if (mPhoneStates.get(i).mSubId != subs.get(i).getSubscriptionId()) {
                return false;
            }
        }
        return true;
    }

    private PhoneState getState(int subId) {
        for (PhoneState state : mPhoneStates) {
            if (state.mSubId == subId) {
                return state;
            }
        }
        Log.e(TAG, "Unexpected subscription " + subId);
        return null;
    }

    private PhoneState inflatePhoneState(int subId) {
        PhoneState state = new PhoneState(subId, mContext);
        if (mMobileSignalGroup != null) {
            mMobileSignalGroup.addView(state.mMobileGroup);
        }
        mPhoneStates.add(state);
        return state;
    }

    @Override
    public void setIsAirplaneMode(IconState icon) {
        mIsAirplaneMode = icon.visible && !mBlockAirplane;
        mAirplaneIconId = icon.icon;
        mAirplaneContentDescription = icon.contentDescription;

        apply();
    }

    @Override
    public void setMobileDataEnabled(boolean enabled) {
        // Don't care.
    }

    @Override
    public boolean dispatchPopulateAccessibilityEventInternal(AccessibilityEvent event) {
        // Standard group layout onPopulateAccessibilityEvent() implementations
        // ignore content description, so populate manually
        if (mEthernetVisible && mEthernetGroup != null &&
                mEthernetGroup.getContentDescription() != null)
            event.getText().add(mEthernetGroup.getContentDescription());
        if (mWifiVisible && mWifiGroup != null && mWifiGroup.getContentDescription() != null)
            event.getText().add(mWifiGroup.getContentDescription());
        for (PhoneState state : mPhoneStates) {
            state.populateAccessibilityEvent(event);
        }
        return super.dispatchPopulateAccessibilityEventInternal(event);
    }

    @Override
    public void onRtlPropertiesChanged(int layoutDirection) {
        super.onRtlPropertiesChanged(layoutDirection);

        if (mEthernet != null) {
            mEthernet.setImageDrawable(null);
            mEthernetDark.setImageDrawable(null);
            mLastEthernetIconId = -1;
        }

        if (mWifi != null) {
            mWifi.setImageDrawable(null);
            mWifiDark.setImageDrawable(null);
            mLastWifiStrengthId = -1;
        }

        for (PhoneState state : mPhoneStates) {
            if (state.mMobile != null) {
                state.maybeStopAnimatableDrawable(state.mMobile);
                state.mMobile.setImageDrawable(null);
                state.mLastMobileStrengthId = -1;
            }
            if (state.mMobileDark != null) {
                state.maybeStopAnimatableDrawable(state.mMobileDark);
                state.mMobileDark.setImageDrawable(null);
                state.mLastMobileStrengthId = -1;
            }
            if (state.mMobileType != null) {
                state.mMobileType.setImageDrawable(null);
                state.mLastMobileTypeId = -1;
            }
        }

        if (mAirplane != null) {
            mAirplane.setImageDrawable(null);
            mLastAirplaneIconId = -1;
        }

        apply();
    }

    @Override
    public boolean hasOverlappingRendering() {
        return false;
    }

    // Run after each indicator change.
    private void apply() {
        if (mWifiGroup == null) return;
        //caopei@wind-mobi.com 2017.04.20 start
        //fix panell 2584 volte icon should be located at the left of WIFI
        setVolteIcon();
        //caopei@wind-mobi.com 2017.04.20 end
        mVpn.setVisibility(mVpnVisible ? View.VISIBLE : View.GONE);
        if (DEBUG) Log.d(TAG, String.format("vpn: %s", mVpnVisible ? "VISIBLE" : "GONE"));

        if (mEthernetVisible) {
            if (mLastEthernetIconId != mEthernetIconId) {
                setIconForView(mEthernet, mEthernetIconId);
                setIconForView(mEthernetDark, mEthernetIconId);
                mLastEthernetIconId = mEthernetIconId;
            }
            mEthernetGroup.setContentDescription(mEthernetDescription);
            mEthernetGroup.setVisibility(View.VISIBLE);
        } else {
            mEthernetGroup.setVisibility(View.GONE);
        }

        if (DEBUG) Log.d(TAG,
                String.format("ethernet: %s",
                    (mEthernetVisible ? "VISIBLE" : "GONE")));

        if (mWifiVisible) {
            if (mWifiStrengthId != mLastWifiStrengthId) {
                setIconForView(mWifi, mWifiStrengthId);
                setIconForView(mWifiDark, mWifiStrengthId);
                mLastWifiStrengthId = mWifiStrengthId;
            }
            mWifiGroup.setContentDescription(mWifiDescription);
            mWifiGroup.setVisibility(View.VISIBLE);
        } else {
            mWifiGroup.setVisibility(View.GONE);
        }

        if (DEBUG) Log.d(TAG,
                String.format("wifi: %s sig=%d",
                    (mWifiVisible ? "VISIBLE" : "GONE"),
                    mWifiStrengthId));

        boolean anyMobileVisible = false;
        /// M: Support for [Network Type on Statusbar]
        /// A spacer is set between networktype and WIFI icon @ {
        if (FeatureOptions.MTK_CTA_SET) {
            anyMobileVisible = true;
        }
        /// @ }
        int firstMobileTypeId = 0;
        for (PhoneState state : mPhoneStates) {
            if (state.apply(anyMobileVisible)) {
                if (!anyMobileVisible) {
                    firstMobileTypeId = state.mMobileTypeId;
                    anyMobileVisible = true;
                }
            }
        }

        if (mIsAirplaneMode) {
            if (mLastAirplaneIconId != mAirplaneIconId) {
                setIconForView(mAirplane, mAirplaneIconId);
                mLastAirplaneIconId = mAirplaneIconId;
            }
            mAirplane.setContentDescription(mAirplaneContentDescription);
            mAirplane.setVisibility(View.VISIBLE);
        } else {
            mAirplane.setVisibility(View.GONE);
        }

        if (mIsAirplaneMode && mWifiVisible) {
            mWifiAirplaneSpacer.setVisibility(View.VISIBLE);
        } else {
            mWifiAirplaneSpacer.setVisibility(View.GONE);
        }

        if (((anyMobileVisible && firstMobileTypeId != 0) || mNoSimsVisible) && mWifiVisible) {
            mWifiSignalSpacer.setVisibility(View.VISIBLE);
        } else {
            mWifiSignalSpacer.setVisibility(View.GONE);
        }
        //caopei@wind-mobi.com 2017.04.20 start
        //fix panell 2584 volte icon should be located at the left of WIFI
        if(WindFeatureOptions.WIND_DEF_PRO_A158 && mIsVolteVisible && mWifiVisible){
            mVolteSpacer.setVisibility(View.VISIBLE);
        }else{
            mVolteSpacer.setVisibility(View.GONE);
        }
        //caopei@wind-mobi.com 2017.04.20 end
        mNoSimsCombo.setVisibility(mNoSimsVisible ? View.VISIBLE : View.GONE);
        /// M: Add for Plugin feature @ {
        mStatusBarExt.setCustomizedNoSimsVisible(mNoSimsVisible);
        mStatusBarExt.setCustomizedAirplaneView(mNoSimsCombo, mIsAirplaneMode);
        /// @ }

        boolean anythingVisible = mNoSimsVisible || mWifiVisible || mIsAirplaneMode
                || anyMobileVisible || mVpnVisible || mEthernetVisible;
        setPaddingRelative(0, 0, anythingVisible ? mEndPadding : mEndPaddingNothingVisible, 0);
    }

    /**
     * Sets the given drawable id on the view. This method will also scale the icon by
     * {@link #mIconScaleFactor} if appropriate.
     */
    private void setIconForView(ImageView imageView, @DrawableRes int iconId) {
        // Using the imageView's context to retrieve the Drawable so that theme is preserved.
        Drawable icon = imageView.getContext().getDrawable(iconId);

        if (mIconScaleFactor == 1.f) {
            imageView.setImageDrawable(icon);
        } else {
            imageView.setImageDrawable(new ScalingDrawableWrapper(icon, mIconScaleFactor));
        }
    }

    public void setIconTint(int tint, float darkIntensity, Rect tintArea) {
        boolean changed = tint != mIconTint || darkIntensity != mDarkIntensity
                || !mTintArea.equals(tintArea);
        mIconTint = tint;
        mDarkIntensity = darkIntensity;
        mTintArea.set(tintArea);
        if (changed && isAttachedToWindow()) {
            applyIconTint();
        }
    }
    //caopei@wind-mobi.com 2017.04.20 start
    //fix panell 2584 volte icon should be located at the left of WIFI
    private void setVolteIcon() {
            if (mVolteIcon == 0) {
                mVolteType.setVisibility(View.GONE);
            } else {
                //lijingwei@wind-mobi.com 2017/3/29 start
                //fix PANELL-2149 The VoLTE icon is wrong
                //hanweiwei@wind-mobi.com mod, add Brazil
                String COUNTRYCODE_CHANGE_VOLTE_ICON = CountryCodeUtils.getStringValue(CountryCodeUtils.COUNTRYCODE_CHANGE_VOLTE_ICON);
                if (COUNTRYCODE_CHANGE_VOLTE_ICON != null && COUNTRYCODE_CHANGE_VOLTE_ICON.equals("yes")){
                  mVolteType.setImageResource(R.drawable.ic_volte_4g);
                }else {
                    mVolteType.setImageResource(mVolteIcon);
                }
                //lijingwei@wind-mobi.com 2017/3/29 end
                mVolteType.setVisibility(View.VISIBLE);
            }
            /// M: customize VoLTE icon. @{
            mStatusBarExt.setCustomizedVolteView(mVolteIcon, mVolteType);
            /// M: customize VoLTE icon. @}
            mIsVolteVisible = mVolteType.isShown()?true:false;
        }
    //caopei@wind-mobi.com 2017.04.20 end
    private void applyIconTint() {
        setTint(mVpn, StatusBarIconController.getTint(mTintArea, mVpn, mIconTint));
        setTint(mAirplane, StatusBarIconController.getTint(mTintArea, mAirplane, mIconTint));
        applyDarkIntensity(
                StatusBarIconController.getDarkIntensity(mTintArea, mNoSims, mDarkIntensity),
                mNoSims, mNoSimsDark);
        applyDarkIntensity(
                StatusBarIconController.getDarkIntensity(mTintArea, mWifi, mDarkIntensity),
                mWifi, mWifiDark);
        //caopei@wind-mobi.com 2017.04.20 start
        //fix panell 2584 volte icon should be located at the left of WIFI
        setTint(mVolteType, StatusBarIconController.getTint(mTintArea, mVolteType, mIconTint));
        //caopei@wind-mobi.com 2017.04.20 end
        applyDarkIntensity(
                StatusBarIconController.getDarkIntensity(mTintArea, mEthernet, mDarkIntensity),
                mEthernet, mEthernetDark);
        for (int i = 0; i < mPhoneStates.size(); i++) {
            mPhoneStates.get(i).setIconTint(mIconTint, mDarkIntensity, mTintArea);
        }
    }

    private void applyDarkIntensity(float darkIntensity, View lightIcon, View darkIcon) {
        lightIcon.setAlpha(1 - darkIntensity);
        darkIcon.setAlpha(darkIntensity);
    }

    private void setTint(ImageView v, int tint) {
        v.setImageTintList(ColorStateList.valueOf(tint));
    }

    private class PhoneState {
        private final int mSubId;
        private boolean mMobileVisible = false;
        private int mMobileStrengthId = 0, mMobileTypeId = 0, mNetworkIcon = 0;
        //caopei@wind-mobi.com 2017.04.20 start
        //fix panell 2584 volte icon should be located at the left of WIFI
        //yexumin@wind-mobi.com 20170915 start
        //fix bug 177676
        private int mVolteIcon = 0;
        //yexumin@wind-mobi.com 20170915 end
        //caopei@wind-mobi.com 2017.04.20 end
        private int mLastMobileStrengthId = -1;
        private int mLastMobileTypeId = -1;
        private boolean mIsMobileTypeIconWide;
        private String mMobileDescription, mMobileTypeDescription;

        private ViewGroup mMobileGroup;

        private ImageView mMobile, mMobileDark, mMobileType;

        /// M: Add for new features @ {
        // Add for [Network Type and volte on Statusbar]
        private ImageView mNetworkType;
        //caopei@wind-mobi.com 2017.04.20 start
        //fix panell 2584 volte icon should be located at the left of WIFI
        //private ImageView mVolteType;
        //caopei@wind-mobi.com 2017.04.20 end
        private boolean mIsWfcCase;
        /// @ }
        //caopei@wind-mobi 2016.12.15 start
        private int mRoamIcon = 0;
        //caopei@wind-mobi 2016.12.15 end
        /// M: Add for plugin features. @ {
        private boolean mDataActivityIn, mDataActivityOut;
        private ISystemUIStatusBarExt mPhoneStateExt;
        /// @ }

        public PhoneState(int subId, Context context) {
            ViewGroup root = (ViewGroup) LayoutInflater.from(context)
                    .inflate(R.layout.mobile_signal_group_ext, null);

            /// M: Add data group for plugin feature. @ {
            mPhoneStateExt = PluginManager.getSystemUIStatusBarExt(context);
            mPhoneStateExt.addCustomizedView(subId, context, root);
            /// @ }

            setViews(root);
            mSubId = subId;
        }

        public void setViews(ViewGroup root) {
            mMobileGroup    = root;
            mMobile         = (ImageView) root.findViewById(R.id.mobile_signal);
            mMobileDark     = (ImageView) root.findViewById(R.id.mobile_signal_dark);
            mMobileType     = (ImageView) root.findViewById(R.id.mobile_type);
            mNetworkType    = (ImageView) root.findViewById(R.id.network_type);
            //caopei@wind-mobi.com 2017.04.20 start
            //fix panell 2584 volte icon should be located at the left of WIFI
            //mVolteType      = (ImageView) root.findViewById(R.id.volte_indicator_ext);
            //caopei@wind-mobi.com 2017.04.20 end
        }

        public boolean apply(boolean isSecondaryIcon) {
            if (mMobileVisible && !mIsAirplaneMode) {
                if (mLastMobileStrengthId != mMobileStrengthId) {
                    updateAnimatableIcon(mMobile, mMobileStrengthId);
                    updateAnimatableIcon(mMobileDark, mMobileStrengthId);
                    mLastMobileStrengthId = mMobileStrengthId;
                }

                if (mLastMobileTypeId != mMobileTypeId) {

                    //caopei@wind-mobi.com 2016.12.15 start
                    //fix feature 145865 single level custom
                    if (WindFeatureOptions.WIND_DEF_PRO_A158)
                    {
                        Log.d(TAG,"apply():mNC.isMobileRoaming="+mNC.isMobileRoaming()+" mMobileTypeId="+mMobileTypeId+" mRoamIcon="+mRoamIcon);
                        if(mNC.isMobileRoaming()&&mRoamIcon != 0&&mRoamIcon!=mMobileTypeId){
                            mMobileType.setImageResource(mRoamIcon);
                        }else if(mMobileTypeId != 0) {
                            mMobileType.setImageDrawable(null);
                        } else {
                            mMobileType.setImageResource(mMobileTypeId);
                        }
                    }else{
                    mMobileType.setImageResource(mMobileTypeId);
                    }
                    mLastMobileTypeId = mMobileTypeId;
                }
                //caopei@wind-mobi.com 2016.12.15 end
                mMobileGroup.setContentDescription(mMobileTypeDescription
                        + " " + mMobileDescription);
                mMobileGroup.setVisibility(View.VISIBLE);
                showViewInWfcCase();
            } else {
                if (mIsAirplaneMode && (mIsWfcEnable && mVolteIcon != 0)) {
                    /// M:Bug fix for show vowifi icon in flight mode
                    mMobileGroup.setVisibility(View.VISIBLE);
                    hideViewInWfcCase();
                } else {
                    mMobileGroup.setVisibility(View.GONE);
                }
            }

            /// M: Set all added or customised view. @ {
            setCustomizeViewProperty();
            /// @ }

            // When this isn't next to wifi, give it some extra padding between the signals.
            mMobileGroup.setPaddingRelative(isSecondaryIcon ? mSecondaryTelephonyPadding : 0,
                    0, 0, 0);
            mMobile.setPaddingRelative(
                    mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding,
                    0, 0, 0);
            mMobileDark.setPaddingRelative(
                    mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding,
                    0, 0, 0);

            if (DEBUG) Log.d(TAG, String.format("mobile: %s sig=%d typ=%d",
                        (mMobileVisible ? "VISIBLE" : "GONE"), mMobileStrengthId, mMobileTypeId));

            mMobileType.setVisibility(mMobileTypeId != 0 ? View.VISIBLE : View.GONE);

            /// M: Add for support plugin featurs. @ {
            setCustomizedOpViews();
            /// @ }

            return mMobileVisible;
        }

        private void updateAnimatableIcon(ImageView view, int resId) {
            maybeStopAnimatableDrawable(view);
            setIconForView(view, resId);
            //hengyongyan@wind-mobi.com 2017.2.9 start
            //fixbug#152874
            if(view == mMobileDark){
               Log.d(TAG,"PhoneState updateAnimatableIcon mMobileDark");
               ColorMatrix cm = new ColorMatrix();
               cm.set(new float[]{1, 0, 0, 0, -80,
                                       0, 1, 0, 0, -80,
                                       0, 0, 1, 0, -80,
                                       0, 0, 0, 1, 0});
               view.setColorFilter(new ColorMatrixColorFilter(cm));
            }
            //hengyongyan@wind-mobi.com 2017.2.9 end
            maybeStartAnimatableDrawable(view);
        }

        private void maybeStopAnimatableDrawable(ImageView view) {
            Drawable drawable = view.getDrawable();

            // Check if the icon has been scaled. If it has retrieve the actual drawable out of the
            // wrapper.
            if (drawable instanceof ScalingDrawableWrapper) {
                drawable = ((ScalingDrawableWrapper) drawable).getDrawable();
            }

            if (drawable instanceof Animatable) {
                Animatable ad = (Animatable) drawable;
                if (ad.isRunning()) {
                    ad.stop();
                }
            }
        }

        private void maybeStartAnimatableDrawable(ImageView view) {
            Drawable drawable = view.getDrawable();

            // Check if the icon has been scaled. If it has retrieve the actual drawable out of the
            // wrapper.
            if (drawable instanceof ScalingDrawableWrapper) {
                drawable = ((ScalingDrawableWrapper) drawable).getDrawable();
            }

            if (drawable instanceof Animatable) {
                Animatable ad = (Animatable) drawable;
                if (ad instanceof AnimatedVectorDrawable) {
                    ((AnimatedVectorDrawable) ad).forceAnimationOnUI();
                }
                if (!ad.isRunning()) {
                    ad.start();
                }
            }
        }

        public void populateAccessibilityEvent(AccessibilityEvent event) {
            if (mMobileVisible && mMobileGroup != null
                    && mMobileGroup.getContentDescription() != null) {
                event.getText().add(mMobileGroup.getContentDescription());
            }
        }

        public void setIconTint(int tint, float darkIntensity, Rect tintArea) {
            applyDarkIntensity(
                    StatusBarIconController.getDarkIntensity(tintArea, mMobile, darkIntensity),
                    mMobile, mMobileDark);
            setTint(mMobileType, StatusBarIconController.getTint(tintArea, mMobileType, tint));
            setTint(mNetworkType, StatusBarIconController.getTint(tintArea, mNetworkType, tint));
            //caopei@wind-mobi.com 2017.04.20 start
            //fix panell 2584 volte icon should be located at the left of WIFI
            //setTint(mVolteType, StatusBarIconController.getTint(tintArea, mVolteType, tint));
            //caopei@wind-mobi.com 2017.04.20 end
        }

        /// M: Set all added or customised view. @ {
        private void setCustomizeViewProperty() {
            // Add for [Network Type on Statusbar], the place to set network type icon.
            setNetworkIcon();
            /// M: Add for volte icon.
            //caopei@wind-mobi.com 2017.04.20 start
            //fix panell 2584 volte icon should be located at the left of WIFI
            //setVolteIcon();
            //caopei@wind-mobi.com 2017.04.20 end
        }

        /// M: Add for volte icon on Statusbar @{
        //caopei@wind-mobi.com 2017.04.20 start
        //fix panell 2584 volte icon should be located at the left of WIFI
        /*private void setVolteIcon() {
            if (mVolteIcon == 0) {
                mVolteType.setVisibility(View.GONE);
            } else {
                //lijingwei@wind-mobi.com 2017/3/29 start
                //fix PANELL-2149 The VoLTE icon is wrong
                //hanweiwei@wind-mobi.com mod, add Brazil
                String COUNTRYCODE_CHANGE_VOLTE_ICON = CountryCodeUtils.getStringValue(CountryCodeUtils.COUNTRYCODE_CHANGE_VOLTE_ICON);
                if (COUNTRYCODE_CHANGE_VOLTE_ICON != null && COUNTRYCODE_CHANGE_VOLTE_ICON.equals("yes")){
                    mVolteType.setImageResource(R.drawable.ic_volte_4g);
                }else {
                    mVolteType.setImageResource(mVolteIcon);
                }
                //lijingwei@wind-mobi.com 2017/3/29 end
                mVolteType.setVisibility(View.VISIBLE);
            }
            /// M: customize VoLTE icon. @{
            mStatusBarExt.setCustomizedVolteView(mVolteIcon, mVolteType);
            /// M: customize VoLTE icon. @}
        }*/
        ///@}
        //caopei@wind-mobi.com 2017.04.20 end
        /// M : Add for [Network Type on Statusbar]
        private void setNetworkIcon() {
            // Network type is CTA feature, so non CTA project should not set this.
            //caopei@wind-mobi.com 2017.03.08 start
            //fix bug 158063 non CTA project show networkicon also
            /*if (!FeatureOptions.MTK_CTA_SET) {
                return;
            }*/
            //caopei@wind-mobi.com 2017.03.08 end
            //xiaoxiao@wind-mobi.com fix PANELL-2213 20170324 start
            int subId = SubscriptionManager.getDefaultDataSubscriptionId();
            //caopei@wind-mobi.com 2017.05.14 start
            //fix panell 3059 when mobile data off no networkType display,data on and no data traffic show grayed icon
            boolean hasMobileData = ConnectivityManager.from(mContext).getMobileDataEnabled();
            Log.d(TAG,"mMobileTypeId: "+mMobileTypeId+" subId: "+subId +" mSubId: "+mSubId+",mWifiVisible = "+mWifiVisible +"hasMobileData="+hasMobileData);
            if(WindFeatureOptions.WIND_DEF_OPTR_A158_LAD || WindFeatureOptions.WIND_DEF_OPTR_A158_LAS || WindFeatureOptions.WIND_DEF_OPTR_A158_LBD){
                if (mNetworkIcon == 0 || (mMobileTypeId==0 && subId !=mSubId) || (!hasMobileData)) {
                //caopei@wind-mobi.com 2017.05.14 end
                //xiaoxiao@wind-mobi.com 20170324 end
                    mNetworkType.setVisibility(View.GONE);
                } else {
                    //caopei@wind-mobi.com 2017.04.27 start
                    //fix feature 145865 single level custom ,fix panell 1622 with tigo sim card show LTE instead of 4G
                    if(WindFeatureOptions.WIND_DEF_PRO_A158){
                        Log.d(TAG,"setNetworkIcon():isMobileRoaming="+mNC.isMobileRoaming()+" mMobileTypeId="+mMobileTypeId);
                        int phoneId = SubscriptionManager.getPhoneId(mSubId);
                        String mccmnc = getTelephonyProperty(phoneId,TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, "");
                        if(mMobileTypeId != 0){
                            final int actualDataNetworkType = mTelephonyManager.getDataNetworkType(subId);
                            if(!"".equals(mccmnc)&&isShowLTESim(mccmnc)&& TelephonyManager.NETWORK_TYPE_LTE == actualDataNetworkType){
                                mNetworkType.setImageResource(R.drawable.zz_moto_stat_sys_data_connected_lte_wide);
                            }else{
                                mNetworkType.setImageResource(mMobileTypeId);
                            }
                            Log.d(TAG,"actualDataNetworkType="+actualDataNetworkType+", TelephonyManager.NETWORK_TYPE_LTE="+TelephonyManager.NETWORK_TYPE_LTE);
                        }else{
                            final int actualVoiceNetworkType = mTelephonyManager.getVoiceNetworkType(mSubId);
                            if(!"".equals(mccmnc)&&isShowLTESim(mccmnc)&&TelephonyManager.NETWORK_TYPE_LTE == actualVoiceNetworkType){
                                mNetworkType.setImageResource(R.drawable.zz_moto_stat_sys_data_suspended_lte_wide);
                            }else{
                                mNetworkType.setImageResource(mNetworkIcon);
                            }
                            Log.d(TAG,"actualDataNetworkType="+actualVoiceNetworkType+", TelephonyManager.NETWORK_TYPE_LTE="+TelephonyManager.NETWORK_TYPE_LTE);
                        }
                    }else{
                        mNetworkType.setImageResource(mNetworkIcon);
                    }
                    //mNetworkType.setImageResource(mNetworkIcon);
                    //caopei@wind-mobi.com 2017.04.27 end
                    mNetworkType.setVisibility(View.VISIBLE);
                }
            }else{
                if (mNetworkIcon == 0 || (mMobileTypeId==0 && subId !=mSubId)) {
                //xiaoxiao@wind-mobi.com 20170324 end
                    mNetworkType.setVisibility(View.GONE);
                } else {
                    //caopei@wind-mobi.com 2017.04.27 start
                    //fix feature 145865 single level custom ,fix panell 1622 with tigo sim card show LTE instead of 4G
                    if(WindFeatureOptions.WIND_DEF_PRO_A158){
                        Log.d(TAG,"setNetworkIcon():isMobileRoaming="+mNC.isMobileRoaming()+" mMobileTypeId="+mMobileTypeId);
                        int phoneId = SubscriptionManager.getPhoneId(mSubId);
                        String mccmnc = getTelephonyProperty(phoneId,TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, "");
                        if(mMobileTypeId != 0){
                            final int actualDataNetworkType = mTelephonyManager.getDataNetworkType(subId);
                            //yexumin@wind-mobi.com add 20171129 start
                            if(!"".equals(mccmnc)&&isShowLTESim(mccmnc)&& TelephonyManager.NETWORK_TYPE_LTE == actualDataNetworkType
                                && !(mNC.isMobileRoaming() || "Roaming".equals(mMobileTypeDescription))){
                            //yexumin@wind-mobi.com add 20171129 end
                                mNetworkType.setImageResource(R.drawable.zz_moto_stat_sys_data_connected_lte_wide);
                            }else{
                                mNetworkType.setImageResource(mMobileTypeId);
                            }
                            Log.d(TAG,"actualDataNetworkType="+actualDataNetworkType+", TelephonyManager.NETWORK_TYPE_LTE="+TelephonyManager.NETWORK_TYPE_LTE);
                        }else{
                            final int actualVoiceNetworkType = mTelephonyManager.getVoiceNetworkType(mSubId);
                            if(!"".equals(mccmnc)&&isShowLTESim(mccmnc)&&TelephonyManager.NETWORK_TYPE_LTE == actualVoiceNetworkType){
                                mNetworkType.setImageResource(R.drawable.zz_moto_stat_sys_data_suspended_lte_wide);
                            }else{
                                mNetworkType.setImageResource(mNetworkIcon);
                            }
                            Log.d(TAG,"actualDataNetworkType="+actualVoiceNetworkType+", TelephonyManager.NETWORK_TYPE_LTE="+TelephonyManager.NETWORK_TYPE_LTE);
                        }
                    }else{
                        mNetworkType.setImageResource(mNetworkIcon);
                    }
                    //mNetworkType.setImageResource(mNetworkIcon);
                    //caopei@wind-mobi.com 2017.04.27 end
                    mNetworkType.setVisibility(View.VISIBLE);
                }
            }
            //caopei@wind-mobi.com 2017.05.14 end
        }
        //caopei@wind-mobi.com 2017.04.27 start
        //fix panell 1622 with tigo sim card show LTE instead of 4G
        private String getTelephonyProperty(int phoneId, String property, String defaultVal) {
            String propVal = null;
            String prop = SystemProperties.get(property);
            Log.d(TAG, "getTelephonyProperty prop value= " + prop);
            if ((prop != null) && (prop.length() > 0)) {
                String values[] = prop.split(",");
                if ((phoneId >= 0) && (phoneId < values.length) && (values[phoneId] != null)) {
                    propVal = values[phoneId];
                }
            }
            return propVal == null ? defaultVal : propVal;
        }
        public boolean isShowLTESim(String mccMnc ){
             final String TIGOCard[] = {"732103","732111","330110","26002","26001"};
             //final String TIGOCard[] = {"46007","46002"};//just test
             for(int j=0;j<TIGOCard.length;j++){
                if(TIGOCard[j].equals(mccMnc)){
                    Log.d(TAG, "isShowLTESim() true ");
                    return true;
                }
            }
             return false;
        }
        //caopei@wind-mobi.com 2017.04.27 end
        /// M: Add for plugin features. @ {
        private void setCustomizedOpViews() {
            if (mMobileVisible && !mIsAirplaneMode) {
                mPhoneStateExt.getServiceStateForCustomizedView(mSubId);

                mPhoneStateExt.setCustomizedAirplaneView(
                    mNoSimsCombo, mIsAirplaneMode);
                mPhoneStateExt.setCustomizedNetworkTypeView(
                    mSubId, mNetworkIcon, mNetworkType);
                mPhoneStateExt.setCustomizedDataTypeView(
                    mSubId, mMobileTypeId,
                    mDataActivityIn, mDataActivityOut);
                mPhoneStateExt.setCustomizedSignalStrengthView(
                    mSubId, mMobileStrengthId, mMobile);
                mPhoneStateExt.setCustomizedSignalStrengthView(
                    mSubId, mMobileStrengthId, mMobileDark);
                mPhoneStateExt.setCustomizedMobileTypeView(
                    mSubId, mMobileType);
                mPhoneStateExt.setCustomizedView(mSubId);
            }
        }
        /// @ }

        private void hideViewInWfcCase() {
            Log.d(TAG, "hideViewInWfcCase, isWfcEnabled = " + mIsWfcEnable + " mSubId =" + mSubId);
            mMobile.setVisibility(View.GONE);
            mMobileDark.setVisibility(View.GONE);
            mMobileType.setVisibility(View.GONE);
            mNetworkType.setVisibility(View.GONE);
            mIsWfcCase = true;
        }

        private void showViewInWfcCase() {
            Log.d(TAG, "showViewInWfcCase: mSubId = " + mSubId + ", mIsWfcCase=" + mIsWfcCase);
            if (mIsWfcCase) {
                mMobile.setVisibility(View.VISIBLE);
                mMobileDark.setVisibility(View.VISIBLE);
                mMobileType.setVisibility(View.VISIBLE);
                mNetworkType.setVisibility(View.VISIBLE);
                mIsWfcCase = false;
            }
        }
    }

}

