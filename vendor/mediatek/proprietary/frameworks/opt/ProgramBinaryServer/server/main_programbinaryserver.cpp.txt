/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein is
 * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
 * the prior written permission of MediaTek inc. and/or its licensors, any
 * reproduction, modification, use or disclosure of MediaTek Software, and
 * information contained herein, in whole or in part, shall be strictly
 * prohibited.
 *
 * MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
 * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
 * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
 * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
 * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
 * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
 * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
 * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
 * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
 * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
 * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
 * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
 * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek
 * Software") have been modified by MediaTek Inc. All revisions are subject to
 * any receiver's applicable license agreements with MediaTek Inc.
 */

#include "ProgramBinaryService.h"

#include <binder/IServiceManager.h>
#include <binder/IPCThreadState.h>
#include <binder/ProcessState.h>
#include <binder/IServiceManager.h>
#include <utils/Log.h>
#include <sys/wait.h>
#include <cutils/properties.h>

using namespace android;


int main(int, char**) {
    /// M: Check whether program binary service is enabled or not.
    char property[PROPERTY_VALUE_MAX];
    if (property_get(PROPERTY_DISABLE_PROGRAM_BINARY, property, "0") > 0) {
        ALOGI("Get disable program binary service property (%s)", property);
        if (atoi(property)) {
            ALOGI("Program binary service is disabled.");
            return 0;
        }
    }

    ALOGI("Program binary server is starting...");

    // Start the thread pool
    ProcessState::self()->startThreadPool();

    // Instantiate programbinaries
    sp<ProgramBinaryService> pb = new ProgramBinaryService();

    // Initialize before clients can connect
    pb->init();

    // Publish program binaries
    sp<IServiceManager> sm(defaultServiceManager());
    sm->addService(String16(PROGRAM_BINARY_NAME), pb, false);
    ALOGI("Program binary service is added to service manager.");

    // Trigger program binary builder
    ALOGI("Execute program_binary_builder.");

    signal(SIGCHLD, SIG_IGN);
    pid_t pid;
    if ((pid = fork()) < 0) {
        ALOGI("an error occurred while forking son.\n");
    } else if (pid == 0) {
        // Child process used for building program binaries
        ALOGI("Child process for building program: Pid is %d.", getpid());
        char cmd[] = "/vendor/bin/program_binary_builder";
        char *args[2] = {cmd, NULL};
        int ret = execv(cmd, args);
        // Reach here only if error occurs
        ALOGW("Execute program_binary_builder failed: result %d errno %d -> %s",
                ret, errno, strerror(errno));
    } else {
        // Parent process used for handling binder requeset
        ALOGI("Parent process for handling binder: Pid of child is %d.", pid);

        // run in this thread
        IPCThreadState::self()->joinThreadPool();
        ALOGI("Program binary server ended.");
    }

    return 0;
}
